Перем юТест;

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_СоздатьЛибу");
	
	Если ПолучитьПеременнуюСреды("APPVEYOR") = "True" Тогда
    
       Возврат ВсеТесты;   
    
    КонецЕсли;    
    
    ВсеТесты.Добавить("ТестДолжен_ПолучитьПоток");
    ВсеТесты.Добавить("ТестДолжен_ПолучитьСоединение");
            
    ВсеТесты.Добавить("ТестДолжен_Подключиться");
    ВсеТесты.Добавить("ТестДолжен_ПодключитьсяСКлючом");
    ВсеТесты.Добавить("ТестДолжен_ПодключитьсяКАгенту");
   //  ВсеТесты.Добавить("ТестНеДолжен_ПовеситьПоток");

    

	Возврат ВсеТесты;
	
КонецФункции

Процедура ТестДолжен_СоздатьЛибу() Экспорт

	Либа = Новый КлиентSSH("localhost", 2222, "user", "password");
	юТест.ПроверитьРавенство(ТипЗнч(Либа), Тип("КлиентSSH"), "Не создался экзепляр"); 


КонецПроцедуры



Процедура ТестДолжен_ПолучитьПоток() Экспорт

	Либа = Новый КлиентSSH("localhost", 2222, "user", "password");
    юТест.ПроверитьРавенство(ТипЗнч(Либа), Тип("КлиентSSH"), "Не создался экзепляр"); 
    
    Поток = Либа.ПолучитьПоток();
    юТест.ПроверитьРавенство(ТипЗнч(Поток), Тип("ПотокSSH"), "Не получилось поток"); 

КонецПроцедуры

Процедура ТестДолжен_ПолучитьСоединение() Экспорт

	Либа = Новый КлиентSSH("localhost", 2222, "user", "password");
    юТест.ПроверитьРавенство(ТипЗнч(Либа), Тип("КлиентSSH"), "Не создался экзепляр"); 
    
    Соединение = Либа.ПолучитьСоединение();
    юТест.ПроверитьРавенство(ТипЗнч(Соединение), Тип("СоединениеSSH"), "Не получилось поток"); 

КонецПроцедуры


Процедура ТестДолжен_Подключиться() Экспорт

    КлиентSSH = Новый КлиентSSH("127.0.0.1", 2222, "user", "password");
    Соединение = КлиентSSH.ПолучитьСоединение();
    
    Результат = Соединение.ВыполнитьКоманду("echo Привет");   
    
   // А = Символы.ПС; // Падает
   Результат = СтрЗаменить(Результат, Символ(10), "");
   юТест.ПроверитьРавенство(Результат, "Привет", "Нет ответа комманды");
   Результат = Соединение.ВыполнитьКоманду("echo test");
   Результат = СтрЗаменить(Результат, Символ(10), "");
   юТест.ПроверитьРавенство(Результат, "test", "Нет ответа комманды");

    Соединение.Разорвать();
        
КонецПроцедуры

Процедура ТестДолжен_ПодключитьсяСКлючом() Экспорт

    КлиентSSH = Новый КлиентSSH("127.0.0.1", 2222, "user", "");
    КлиентSSH.УстановитьКлюч("C:\DEVELOP\Oscript\oscript-ssh\.ssh\testkey", "");
    
    Соединение = КлиентSSH.ПолучитьСоединение();
    
    Результат = Соединение.ВыполнитьКоманду("echo Привет");   
    
   // А = Символы.ПС; // Падает
   Результат = СтрЗаменить(Результат, Символ(10), "");
   юТест.ПроверитьРавенство(Результат, "Привет", "Нет ответа комманды");
   Результат = Соединение.ВыполнитьКоманду("echo test");
   Результат = СтрЗаменить(Результат, Символ(10), "");
   юТест.ПроверитьРавенство(Результат, "test", "Нет ответа комманды");

    Соединение.Разорвать();
        
КонецПроцедуры



Процедура ТестДолжен_ПодключитьсяКАгенту() Экспорт

    Либа = Новый КлиентSSH("127.0.0.1", 1543, "admin", "");
    Поток = Либа.ПолучитьПоток();
    юТест.ПроверитьРавенство(ТипЗнч(Поток), Тип("ПотокSSH"), "Не получилось поток"); 

    // fix me вешает поток
    // Ответ = Поток.ЗаписатьВПоток("options -v");
        
    Ответ = Поток.ЗаписатьВПоток("options set --show-prompt=no");
    
    Ответ = Поток.ЗаписатьВПоток("options -v");
    
    юТест.ПроверитьРавенство(Ответ, "8.3.11.3034", "Нет ответа комманды");
    
    Ответ2 = Поток.ЗаписатьВПоток("help");
    Сообщить(Ответ2);
    // ВызватьИсключение Ответ2;
    Поток.Разорвать();
        
КонецПроцедуры

Процедура ТестНеДолжен_ПовеситьПоток() Экспорт

    КлиентSSH = Новый КлиентSSH("127.0.0.1", 1543, "admin", "");
    Поток = КлиентSSH.ПолучитьПоток();
    
    Ответ = Поток.ЗаписатьВПоток("options -v");
        
    Поток.Разорвать();
        
КонецПроцедуры