Перем юТест;

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_СоздатьЛибу");
//	ВсеТесты.Добавить("ТестДолжен_Подключиться");
//	ВсеТесты.Добавить("ТестДолжен_ПодключитьсяКАгенту");


	Возврат ВсеТесты;
	
КонецФункции

Процедура ТестДолжен_СоздатьЛибу() Экспорт

	Либа = Новый КлиентSSH;
	
	юТест.ПроверитьРавенство(ТипЗнч(Либа), Тип("КлиентSSH"), "Не создался экзепляр"); 

КонецПроцедуры

Процедура ТестДолжен_Подключиться() Экспорт

    КлиентSSH = Новый КлиентSSH;
    Соединение = КлиентSSH.ПолучитьСоединение("127.0.0.1", 2222, "user", "password");
    Соединение.Установить();
    
    Результат = Соединение.ВыполнитьКоманду("echo 123");   
    юТест.ПроверитьРавенство(Результат, "123" + Символы.ПС, "Нет ответа комманды");
    Результат = Соединение.ВыполнитьКоманду("echo test");
    юТест.ПроверитьРавенство(Результат, "test" + Символы.ПС, "Нет ответа комманды");
    Соединение.Разорвать();
        
КонецПроцедуры

Процедура ТестДолжен_ПодключитьсяКАгенту() Экспорт

    КлиентSSH = Новый КлиентSSH;
    Соединение = КлиентSSH.ПолучитьСоединение("127.0.0.1", 1543, "admin", "");
    Соединение.Установить();
    Соединение.ПолучитьПоток();
    
    Ответ = Соединение.ЗаписатьВПоток("options set --show-prompt=no");
    
    Ответ = Соединение.ЗаписатьВПоток("options -v");
    
    юТест.ПроверитьРавенство(Ответ, "8.3.13.1198", "Нет ответа комманды");
    
    Ответ2 = Соединение.ЗаписатьВПоток("help");
    Сообщить(Ответ2);
    // ВызватьИсключение Ответ2;
    Соединение.Разорвать();
        
КонецПроцедуры